name: Order Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'order-service/**'
      - 'common/**'
      - '.github/workflows/order-service-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'order-service/**'
      - 'common/**'

env:
  SERVICE_NAME: order-service
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/smart-delivery-order-service
  JAVA_VERSION: '17'

jobs:
  test:
    name: Test Order Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build common module
        run: mvn clean install -pl common -am -DskipTests

      - name: Run tests
        run: mvn test -pl order-service

      - name: Generate test coverage report
        run: mvn jacoco:report -pl order-service

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./order-service/target/site/jacoco/jacoco.xml
          flags: order-service
          name: order-service-coverage

  build:
    name: Build Order Service
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build common module
        run: mvn clean install -pl common -am -DskipTests

      - name: Build service
        run: mvn clean package -pl order-service -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: order-service-jar
          path: order-service/target/*.jar

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: order-service-jar
          path: order-service/target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./order-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.smartdelivery.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/smart-delivery
            docker-compose pull order-service
            docker-compose up -d order-service
            docker-compose ps

  deploy-production:
    name: Deploy to Production
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://smartdelivery.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/smart-delivery
            docker-compose pull order-service
            docker-compose up -d order-service
            docker-compose ps

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/actuator/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Order Service deployed to production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()