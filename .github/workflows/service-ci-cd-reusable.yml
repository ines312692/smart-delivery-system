name: Service CI/CD (reutilisable)

on:
  workflow_call:
    inputs:
      service_name:
        description: Nom logique du service (ex. payment-service)
        required: true
        type: string
      module_path:
        description: Chemin du module Maven (ex. payment-service)
        required: true
        type: string
      docker_image:
        description: Image Docker cible (ex. username/smart-delivery-payment-service)
        required: true
        type: string
      health_path:
        description: Chemin health actuator
        required: false
        default: /actuator/health
        type: string
      java_version:
        required: false
        default: '24'
        type: string
      enable_codecov:
        required: false
        default: true
        type: boolean
      enable_sbom:
        required: false
        default: true
        type: boolean
      enable_trivy:
        required: false
        default: true
        type: boolean
      enable_sign:
        required: false
        default: false
        type: boolean
    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      STAGING_HOST:
        required: false
      STAGING_USERNAME:
        required: false
      STAGING_SSH_KEY:
        required: false
      STAGING_URL:
        required: false
      PRODUCTION_HOST:
        required: false
      PRODUCTION_USERNAME:
        required: false
      PRODUCTION_SSH_KEY:
        required: false
      PRODUCTION_URL:
        required: false
      SLACK_WEBHOOK:
        required: false

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ inputs.service_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_NAME: ${{ inputs.service_name }}
  MODULE_PATH: ${{ inputs.module_path }}
  DOCKER_IMAGE: ${{ inputs.docker_image }}
  JAVA_VERSION: ${{ inputs.java_version }}
  HEALTH_PATH: ${{ inputs.health_path }}

jobs:
  test:
    name: Tests + Couverture
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Build (compilation)
        run: mvn -B -U -T 1C -DskipTests install

      - name: Tests module
        run: mvn -B test -pl ${{ env.MODULE_PATH }} -am

      - name: Rapport JaCoCo
        run: mvn -B jacoco:report -pl ${{ env.MODULE_PATH }}

      - name: Upload coverage vers Codecov
        if: ${{ inputs.enable_codecov == true }}
        uses: codecov/codecov-action@v4
        with:
          files: ./${{ env.MODULE_PATH }}/target/site/jacoco/jacoco.xml
          flags: ${{ env.SERVICE_NAME }}
          name: ${{ env.SERVICE_NAME }}-coverage
        continue-on-error: true

      - name: Artefacts de tests (en cas d’échec)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-${{ env.SERVICE_NAME }}
          path: ${{ env.MODULE_PATH }}/target/surefire-reports
          retention-days: 7

  build:
    name: Build JAR
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Package
        run: mvn -B -DskipTests package -pl ${{ env.MODULE_PATH }} -am

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SERVICE_NAME }}-jar
          path: ${{ env.MODULE_PATH }}/target/*.jar
          retention-days: 3

  docker:
    name: Build & Push image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    outputs:
      image-digest: ${{ steps.build_push.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login registry (Docker Hub si fourni)
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.MODULE_PATH }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  scan:
    name: Scan image (Trivy)
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_trivy == true && needs.docker.outputs.image-digest != '' }}
    steps:
      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}@${{ needs.docker.outputs.image-digest }}
          format: table
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Trivy SARIF
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}@${{ needs.docker.outputs.image-digest }}
          format: sarif
          output: trivy-results.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true

  sbom:
    name: Génération SBOM
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_sbom == true && needs.docker.outputs.image-digest != '' }}
    steps:
      - name: Syft SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_IMAGE }}@${{ needs.docker.outputs.image-digest }}
          format: cyclonedx-json
          output-file: sbom-${{ env.SERVICE_NAME }}.cdx.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.SERVICE_NAME }}
          path: sbom-${{ env.SERVICE_NAME }}.cdx.json
          retention-days: 14

  sign:
    name: Signature d’image (Cosign OIDC)
    needs: docker
    runs-on: ubuntu-latest
    if: ${{ inputs.enable_sign == true && github.ref == 'refs/heads/main' && needs.docker.outputs.image-digest != '' }}
    steps:
      - name: Installer Cosign
        uses: sigstore/cosign-installer@v3
      - name: Signer l’image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: cosign sign --yes ${{ env.DOCKER_IMAGE }}@${{ needs.docker.outputs.image-digest }}

  deploy-staging:
    name: Déploiement Staging
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    steps:
      - name: Déployer
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/smart-delivery
            docker compose pull ${{ env.SERVICE_NAME }}
            docker compose up -d ${{ env.SERVICE_NAME }}
            docker compose ps
      - name: Attendre disponibilité
        run: sleep 30
      - name: Health check
        run: curl -f ${{ secrets.STAGING_URL }}/${{ env.SERVICE_NAME }}${{ env.HEALTH_PATH }} || exit 1
        continue-on-error: true

  deploy-production:
    name: Déploiement Production
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Déployer
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/smart-delivery
            docker compose pull ${{ env.SERVICE_NAME }}
            docker compose up -d ${{ env.SERVICE_NAME }}
            docker compose ps
      - name: Attendre disponibilité
        run: sleep 30
      - name: Health check
        run: curl -f ${{ secrets.PRODUCTION_URL }}/${{ env.SERVICE_NAME }}${{ env.HEALTH_PATH }} || exit 1
      - name: Notification Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '${{ env.SERVICE_NAME }} déployé en production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true